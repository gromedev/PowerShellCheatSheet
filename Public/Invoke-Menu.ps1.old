#menu view description

# generate a README.md

# Parameter passthrough
############################################################################
# DISPLAYS FUNCTION SELECTION MENU.                                        #
############################################################################
function Invoke-Menu {
    while ($true) {
        # Displays a menu to the user
        Write-Output ""
        Write-Output "Select an option:"
        Write-Output ""
        Write-Output "1. Search for a file. "
        Write-Output "2. Search for a string within a file."
        Write-Output "3. Search for a process."
        Write-Output "4. Search for a service."
        Write-Output "5. Get SHA1 hash of a file."
        Write-Output "6. Download a file from an URL."
        Write-Output "6. Conduct a ping sweep."


        Write-Output "q. Enter q and return to Exit."
        Write-Output "Enter man and a function number or name to display a description (e.g. man 1)."
        Write-Output ""
        Write-Output "Enter selection: "

        $selection = Read-Host

        # Check if user wants to display a function description
        if ($selection -like "man*") {
            $function = $selection.Split()[1]
            switch ($function) {
                "1" {
                    Clear-Host
                    Write-Output "1. Search for a file: This function searches for a file with a specified name in a specified path and its subdirectories."
                }
                "2" {
                    Clear-Host
                    Write-Output "2. Search for a string within a file: This function searches for a specified string in a specified file and displays the lines containing the string."
                }
                "3" {
                    Clear-Host
                    Write-Output "3. This function prompts the user to enter a process name, retrieves information about the process using the Get-Process cmdlet, and displays the information in a table using the Format-Table cmdlet. If the user confirms that they want to kill the process, the function uses the Stop-Process cmdlet to stop the process."
                }
                "4" {
                    Clear-Host
                    Write-Output "4. "
                }

                "5" {
                    Clear-Host
                    Write-Output "5. "
                }

                "6" {
                    Clear-Host
                    Write-Output "6. "
                }

                "7" {
                    Clear-Host
                    Write-Output "7. "
                }

                "8" {
                    Clear-Host
                    Write-Output "8. "
                }

                "9" {
                    Clear-Host
                    Write-Output "9. "
                }

                "10" {
                    Clear-Host
                    Write-Output "10. "
                }

                "11" {
                    Clear-Host
                    Write-Output "11. "
                }

                # 
            }
            Clear-History
        } else {
            # Run the selected function
            switch ($selection) {
                1 { $findFile }
                2 { $findString }
                3 { $findProcess }
                4 { $findService }
                5 { $getFiles }
                6 {  }
                7 {  }
                8 {  }
                9 {  }
                10 {  }
                11 {  }
                12 {  }

            }
            if ($selection -eq "q") {
                break
            }
        }
    }
}
Invoke-Menu

<#
1 { 
    # Import the file containing the $findFile function
    Import-Module .\findFile.ps1
    # Call the $findFile function
    &$findFile
}
2 { 
    # Import the file containing the $findString function
    Import-Module .\findString.ps1
    # Call the $findString function
    &$findString
}
3 { 
    # Import the file containing the $findProcess function
    Import-Module .\findProcess.ps1
    # Call the $findProcess function
    &$findProcess
}
#>